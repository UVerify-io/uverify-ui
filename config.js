import fs from 'fs';
import path from 'path';
import os from 'os';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const VITE_BACKEND_URL =
  process.env.VITE_BACKEND_URL || 'http://localhost:9090';
const VITE_CARDANO_NETWORK = process.env.VITE_CARDANO_NETWORK || 'mainnet';
const VITE_ADDITIONAL_TEMPLATES = process.env.VITE_ADDITIONAL_TEMPLATES || '';

const OUTPUT_DIR = path.resolve(__dirname, 'public');
const TEMPLATE_DIR = path.resolve(__dirname, 'src/templates');
const DYNAMIC_TEMPLATES_FILE = path.resolve(
  TEMPLATE_DIR,
  'dynamicTemplates.ts'
);
const DYNAMIC_TEMPLATES_CSS_FILE = path.resolve(
  TEMPLATE_DIR,
  'dynamicTemplates.css'
);

const configJson = {
  _warning:
    'WARNING: This file is autogenerated by config.js. Do not edit manually. Changes will be overwritten.',
  backendUrl: VITE_BACKEND_URL,
  cardanoNetwork: VITE_CARDANO_NETWORK,
};

fs.writeFileSync(
  path.join(OUTPUT_DIR, 'config.json'),
  JSON.stringify(configJson, null, 2)
);

function resolvePath(filePath) {
  if (filePath.startsWith('~')) {
    return path.join(os.homedir(), filePath.slice(1));
  } else if (path.isAbsolute(filePath)) {
    return filePath;
  } else {
    return path.resolve(filePath);
  }
}

let dynamicTemplatesContent = `// Auto-generated file - do not edit manually\n\n`;
dynamicTemplatesContent += `import { Templates } from './index';\n\n`;

const templateImports = [];
const templateEntries = [];
const cssSourceDirectives = [];

if (VITE_ADDITIONAL_TEMPLATES) {
  const templatePairs = VITE_ADDITIONAL_TEMPLATES.split(',');
  templatePairs.forEach((pair) => {
    const [name, filePath] = pair.split(':');
    const trimmedName = name?.trim();
    const trimmedFilePath = filePath?.trim();

    if (!trimmedName || !trimmedFilePath) return;

    const absolutePath = resolvePath(trimmedFilePath);
    const relativePath = path.relative(TEMPLATE_DIR, absolutePath);

    let importPath = relativePath.replace(/\\/g, '/');
    if (!importPath.startsWith('.')) {
      importPath = './' + importPath;
    }

    importPath = importPath.replace(/\.(tsx?|jsx?)$/, '');

    const importId = `Template_${trimmedName.replace(/[^a-zA-Z0-9_]/g, '_')}`;

    templateImports.push(`import ${importId} from '${importPath}';`);
    templateEntries.push(`  ${trimmedName}: new ${importId}(),`);

    const parentDir = path.dirname(absolutePath);
    const relativeParentDir = path
      .relative(TEMPLATE_DIR, parentDir)
      .replace(/\\/g, '/');
    const sourcePath = relativeParentDir.startsWith('.')
      ? `${relativeParentDir}/**/*.{jsx,tsx}`
      : `./${relativeParentDir}/**/*.{jsx,tsx}`;
    cssSourceDirectives.push(`@source "${sourcePath}";`);
  });
}

dynamicTemplatesContent += templateImports.join('\n');
dynamicTemplatesContent += '\n';
dynamicTemplatesContent += `export const dynamicTemplates: Templates = {\n`;
dynamicTemplatesContent += templateEntries.join('\n');
dynamicTemplatesContent += `\n};\n`;

fs.writeFileSync(DYNAMIC_TEMPLATES_FILE, dynamicTemplatesContent);

const dynamicTemplatesCssContent = `/* Auto-generated file - do not edit manually */\n${cssSourceDirectives.join(
  '\n'
)}\n`;
fs.writeFileSync(DYNAMIC_TEMPLATES_CSS_FILE, dynamicTemplatesCssContent);
